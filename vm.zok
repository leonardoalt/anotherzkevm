from "./data.zok" import Stack, Memory, State, Program, Calldata, MEMORY_SIZE, PROGRAM_SIZE, CALLDATA_SIZE, STACK_HEAD_START, STACK_SIZE, hasAtLeast, hasAtMost, first, second, third, decrease, increase, writeTop, writeFirst, stop, error

/** Opcode constants */

const u32 ADD = 1
const u32 CALLDATALOAD = 2
const u32 STOP = 3
const u32 PUSH = 4

/*******************/


/** Opcodes */

def add(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack)
	return if e then error(s) else writeFirst::<2>(s, first(s.stack) + second(s.stack)) fi

// If at ANY point, ANY number >= c.values.length ends up on the stack,
// the index access below WILL throw due to the nondeterministic calldataload
// branch in the main interpreter loop.
// This happens whether one uses calldataload or not.
def calldataload(State s, Calldata c) -> State:
	bool e = !s.running || !hasAtLeast::<1>(s.stack) || first(s.stack) >= CALLDATA_SIZE
	return if e then error(s) else writeFirst::<1>(s, c.values[first(s.stack)]) fi

def mload(State s) -> State:
	bool e = !s.running || !hasAtLeast::<1>(s.stack) || first(s.stack) >= MEMORY_SIZE
	return if e then error(s) else writeFirst::<1>(s, s.memory.values[first(s.stack)]) fi

def mstore(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack) || first(s.stack) >= MEMORY_SIZE
	s.stack = decrease::<2>(s.stack)
	s.memory.values[first(s.stack)] = second(s.stack)
	return if e then error(s) else s fi

def push(State s, Program p) -> State:
	s.pc = s.pc + 1
	u32 l = STACK_SIZE + (- 2)
	bool e = !s.running || !hasAtMost::<l>(s.stack)

	u32 x = p.instructions[s.pc]
	s.stack = writeTop(s.stack, x)
	return if e then error(s) else s fi

def main(u32 memoryHash, u32 stackHash, Program program, private Calldata calldata) -> State:
	State s = State {
		stack: Stack { values: [0; STACK_SIZE + STACK_HEAD_START], length: STACK_HEAD_START },
		memory: Memory { values: [0; MEMORY_SIZE] },
		pc: 0,
		running: true,
		error: false
	}

	for u32 i in 0..PROGRAM_SIZE do
		u32 instr = program.instructions[s.pc]

		// Compute all possible future states nondeterministically.
		State s1 = add(s)
		State s2 = stop(s)
		State s3 = push(s, program)
		State s4 = calldataload(s, calldata)

		// Choose the appropriate one.
		s = \
			if (!s.running) then s else \
			if (instr == ADD) then s1 else \
			if (instr == STOP) then s2 else \
			if (instr == PUSH) then s3 else \
			if (instr == CALLDATALOAD) then s4 else \
				error(s) \
			fi \
			fi \
			fi \
			fi \
			fi

		s.pc = if s.running then (s.pc + 1) else s.pc fi
		assert(!s.error)

		// Ensure that the stack guard values are not corrupted.
		// Check up to STACK_HEAD_START.
		assert(s.stack.values[0] == 0)
		assert(s.stack.values[1] == 0)

	endfor

	assert(!s.error)
	assert(!s.running)

	// Ensure that the stack guard values are not corrupted.
	// Check up to STACK_HEAD_START.
	assert(s.stack.values[0] == 0)
	assert(s.stack.values[1] == 0)

	return s
