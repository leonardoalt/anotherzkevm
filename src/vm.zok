from "./data.zok" import Stack, Memory, State, Program, Calldata, MEMORY_SIZE, PROGRAM_SIZE, PROGRAM_ITERATIONS, CALLDATA_SIZE, STACK_HEAD_START, STACK_SIZE, stop, error

from "./opcodes.zok" import STOP, ADD, MUL, SUB, LT, EQ, JUMP, JUMPI, CALLDATALOAD, POP, PUSH32, DUP1, DUP2, DUP3, SWAP1, add, mul, sub, lt, eq, jump, jumpi, calldataload, pop, mload, mstore, push, dup1, dup2, dup3, swap1

def main(u32 memoryHash, u32 stackHash, Program program, private Calldata calldata) -> State:
	// Start with empty stack and empty memory.
	State s = State {
		// Uncomment this to crash \/ with PROGRAM_ITERATIONS = 44
		stack: Stack { values: [0; STACK_SIZE + STACK_HEAD_START], length: STACK_HEAD_START },
		// After 43 steps:
		//stack: Stack { values: [0, 0, 4, 3, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 8 },
		// After 33 steps:
		//stack: Stack { values: [0, 0, 4, 3, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 6 },
		// After 23 steps:
		//stack: Stack { values: [0, 0, 4, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 6 },
		// After 13 steps:
		//stack: Stack { values: [0, 0, 4, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 4 },
		// After 6 steps:
		//stack: Stack { values: [0, 0, 4, 0, 0x00000012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 5 },
		// After 10 steps:
		//stack: Stack { values: [0, 0, 4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 5 },
		// After 8 steps:
		//stack: Stack { values: [0, 0, 4, 4, 0x00000012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 4 },
		// After 9 steps:
		//stack: Stack { values: [0, 0, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], length: 5 },
		memory: Memory { values: [0; MEMORY_SIZE] },
		// Uncomment this to crash \/ with PROGRAM_ITERATIONS = 44
		pc: 0,
		// After 43 steps:
		//pc: 0x0000000e,
		// After 33 steps:
		//pc: 0x0000000f,
		// After 23 steps:
		//pc: 0x00000011,
		// After 13 steps:
		//pc: 0x00000003,
		// After 6 steps:
		//pc: 0x00000009,
		// After 10 steps:
		//pc: 0x0000000e,
		// After 8 steps:
		//pc: 0x0000000b,
		// After 9 steps:
		//pc: 0x0000000d,
		running: true,
		error: false
	}

	for u32 i in 0..PROGRAM_ITERATIONS do
		u32 instr = program.instructions[s.pc]

		// Compute all possible future states nondeterministically.
		State s1 = stop(s)
		State s2 = add(s)
		State s3 = mul(s)
		State s4 = sub(s)
		State s5 = lt(s)
		State s6 = eq(s)
		State s7 = jump(s)
		State s8 = jumpi(s)
		State s9 = calldataload(s, calldata)
		State s10 = pop(s)
		State s11 = push(s, program)
		State s12 = dup1(s)
		State s13 = dup2(s)
		State s14 = dup3(s)
		State s15 = swap1(s)

		// Choose the appropriate data path and sync.
		s = \
			if (!s.running) then s else \
			if (instr == STOP) then s1 else \
			if (instr == ADD) then s2 else \
			if (instr == MUL) then s3 else \
			if (instr == SUB) then s4 else \
			if (instr == LT) then s5 else \
			if (instr == EQ) then s6 else \
			if (instr == JUMP) then s7 else \
			if (instr == JUMPI) then s8 else \
			if (instr == CALLDATALOAD) then s9 else \
			if (instr == POP) then s10 else \
			if (instr == PUSH32) then s11 else \
			if (instr == DUP1) then s12 else \
			if (instr == DUP2) then s13 else \
			if (instr == DUP3) then s14 else \
			if (instr == SWAP1) then s15 else \
				error(s) \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi \
			fi

		s.pc = if s.running then (s.pc + 1) else s.pc fi

		assert(!s.error)

	endfor

	assert(!s.error)
	// Execution should have stopped.
	//assert(!s.running)

	return s
