from "./data.zok" import Stack, Memory, State, Program, Calldata, MEMORY_SIZE, PROGRAM_SIZE, CALLDATA_SIZE, STACK_SIZE, hasAtLeast, hasAtMost, first, second, third, decrease, increase, writeTop, writeFirst, write, error

/** Opcode constants */

const u32 STOP = 0x00000000

const u32 ADD = 0x00000001
const u32 MUL = 0x00000002
const u32 SUB = 0x00000003

const u32 LT = 0x00000010
const u32 EQ = 0x00000014

const u32 SHA3 = 0x00000020

const u32 CALLDATALOAD = 0x00000035

const u32 POP = 0x00000050

const u32 JUMP = 0x00000056
const u32 JUMPI = 0x00000057

const u32 PUSH32 = 0x0000007f

const u32 DUP1 = 0x00000080

const u32 SWAP1 = 0x00000090

/*******************/

/** Opcodes */

def add(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack)
	return if e then error(s) else writeFirst::<2>(s, first(s.stack) + second(s.stack)) fi

def mul(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack)
	return if e then error(s) else writeFirst::<2>(s, first(s.stack) * second(s.stack)) fi

def sub(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack)
	// This crashes \/ when not loading the state (using initial)
	return if e then error(s) else writeFirst::<2>(s, first(s.stack) - second(s.stack)) fi
	//return if e then error(s) else writeFirst::<2>(s, first(s.stack) - 1) fi

def lt(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack)
	u32 r = if first(s.stack) == second(s.stack) then 1 else 0 fi
	return if e then error(s) else writeFirst::<2>(s, r) fi

def eq(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack)
	u32 r = if first(s.stack) == second(s.stack) then 1 else 0 fi
	return if e then error(s) else writeFirst::<2>(s, r) fi

// If at ANY point, ANY number >= c.values.length ends up on the stack,
// the index access below WILL throw due to the nondeterministic calldataload
// branch in the main interpreter loop.
// This happens whether one uses calldataload or not.
// The workaround for this is to use a patched ZoKrates that does not throw
// at out of bounds, and make sure the actual execution does not reach that.
def calldataload(State s, Calldata c) -> State:
	bool e = !s.running || !hasAtLeast::<1>(s.stack) || first(s.stack) >= CALLDATA_SIZE
	return if e then error(s) else writeFirst::<1>(s, c.values[first(s.stack)]) fi

def pop(State s) -> State:
	bool e = !s.running || !hasAtLeast::<1>(s.stack)
	s.stack = decrease::<1>(s.stack)
	return if e then error(s) else s fi

def jump(State s) -> State:
	bool e = !s.running || !hasAtLeast::<1>(s.stack) || first(s.stack) >= PROGRAM_SIZE
	s.pc = if first(s.stack) == 0 then 0 else first(s.stack) + (- 1) fi
	s = pop(s)
	return if e then error(s) else s fi

def jumpi(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack) || first(s.stack) >= PROGRAM_SIZE
	s.pc = if second(s.stack) != 0x00000000 then (first(s.stack) + (- 1)) else s.pc fi
	s.stack = decrease::<2>(s.stack)
	return if e then error(s) else s fi

def mload(State s) -> State:
	bool e = !s.running || !hasAtLeast::<1>(s.stack) || first(s.stack) >= MEMORY_SIZE
	return if e then error(s) else writeFirst::<1>(s, s.memory.values[first(s.stack)]) fi

def mstore(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack) || first(s.stack) >= MEMORY_SIZE
	s.stack = decrease::<2>(s.stack)
	s.memory.values[first(s.stack)] = second(s.stack)
	return if e then error(s) else s fi

def push(State s, Program p) -> State:
	s.pc = s.pc + 1
	u32 l = STACK_SIZE + (- 2)
	bool e = !s.running || !hasAtMost::<l>(s.stack)

	u32 x = p.instructions[s.pc]
	s.stack = writeTop(s.stack, x)
	return if e then error(s) else s fi

def dup1(State s) -> State:
	u32 l = STACK_SIZE + (- 2)
	bool e = !s.running || !hasAtMost::<l>(s.stack)

	s.stack = writeTop(s.stack, first(s.stack))
	return if e then error(s) else s fi

def swap1(State s) -> State:
	bool e = !s.running || !hasAtLeast::<2>(s.stack)
	u32 temp = second(s.stack)
	s.stack = write::<2>(s.stack, first(s.stack))
	s.stack = write::<1>(s.stack, temp)
	return if e then error(s) else s fi
